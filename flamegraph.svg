<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="374" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="357.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="357.00"> </text><svg id="frames" x="10" width="1180" total_samples="1008"><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.10%)</title><rect x="0.0000%" y="197" width="0.0992%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (2 samples, 0.20%)</title><rect x="0.0992%" y="197" width="0.1984%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="2"/><text x="0.3492%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (3 samples, 0.30%)</title><rect x="0.2976%" y="197" width="0.2976%" height="15" fill="rgb(221,193,54)" fg:x="3" fg:w="3"/><text x="0.5476%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (1 samples, 0.10%)</title><rect x="0.5952%" y="197" width="0.0992%" height="15" fill="rgb(248,212,6)" fg:x="6" fg:w="1"/><text x="0.8452%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.20%)</title><rect x="0.6944%" y="181" width="0.1984%" height="15" fill="rgb(208,68,35)" fg:x="7" fg:w="2"/><text x="0.9444%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (7 samples, 0.69%)</title><rect x="0.8929%" y="181" width="0.6944%" height="15" fill="rgb(232,128,0)" fg:x="9" fg:w="7"/><text x="1.1429%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.10%)</title><rect x="1.5873%" y="181" width="0.0992%" height="15" fill="rgb(207,160,47)" fg:x="16" fg:w="1"/><text x="1.8373%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (3 samples, 0.30%)</title><rect x="1.6865%" y="165" width="0.2976%" height="15" fill="rgb(228,23,34)" fg:x="17" fg:w="3"/><text x="1.9365%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (18 samples, 1.79%)</title><rect x="1.6865%" y="181" width="1.7857%" height="15" fill="rgb(218,30,26)" fg:x="17" fg:w="18"/><text x="1.9365%" y="191.50">l..</text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.10%)</title><rect x="3.4722%" y="181" width="0.0992%" height="15" fill="rgb(220,122,19)" fg:x="35" fg:w="1"/><text x="3.7222%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (4 samples, 0.40%)</title><rect x="3.5714%" y="181" width="0.3968%" height="15" fill="rgb(250,228,42)" fg:x="36" fg:w="4"/><text x="3.8214%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.20%)</title><rect x="3.9683%" y="149" width="0.1984%" height="15" fill="rgb(240,193,28)" fg:x="40" fg:w="2"/><text x="4.2183%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.10%)</title><rect x="4.1667%" y="149" width="0.0992%" height="15" fill="rgb(216,20,37)" fg:x="42" fg:w="1"/><text x="4.4167%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.10%)</title><rect x="4.1667%" y="133" width="0.0992%" height="15" fill="rgb(206,188,39)" fg:x="42" fg:w="1"/><text x="4.4167%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (5 samples, 0.50%)</title><rect x="3.9683%" y="165" width="0.4960%" height="15" fill="rgb(217,207,13)" fg:x="40" fg:w="5"/><text x="4.2183%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (8 samples, 0.79%)</title><rect x="3.9683%" y="181" width="0.7937%" height="15" fill="rgb(231,73,38)" fg:x="40" fg:w="8"/><text x="4.2183%" y="191.50"></text></g><g><title>db2-4eb134568b923eb3`db2::table_base2::TableBase2::upper_bound (3 samples, 0.30%)</title><rect x="4.7619%" y="181" width="0.2976%" height="15" fill="rgb(225,20,46)" fg:x="48" fg:w="3"/><text x="5.0119%" y="191.50"></text></g><g><title>db2-4eb134568b923eb3`db2::serializer::PageSerializer&lt;W&gt;::load_page_cached (1 samples, 0.10%)</title><rect x="5.0595%" y="181" width="0.0992%" height="15" fill="rgb(210,31,41)" fg:x="51" fg:w="1"/><text x="5.3095%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (29 samples, 2.88%)</title><rect x="5.1587%" y="165" width="2.8770%" height="15" fill="rgb(221,200,47)" fg:x="52" fg:w="29"/><text x="5.4087%" y="175.50">li..</text></g><g><title>libsystem_platform.dylib`_platform_memcmp (3 samples, 0.30%)</title><rect x="8.0357%" y="165" width="0.2976%" height="15" fill="rgb(226,26,5)" fg:x="81" fg:w="3"/><text x="8.2857%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.10%)</title><rect x="8.3333%" y="165" width="0.0992%" height="15" fill="rgb(249,33,26)" fg:x="84" fg:w="1"/><text x="8.5833%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (5 samples, 0.50%)</title><rect x="8.4325%" y="165" width="0.4960%" height="15" fill="rgb(235,183,28)" fg:x="85" fg:w="5"/><text x="8.6825%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (3 samples, 0.30%)</title><rect x="8.9286%" y="165" width="0.2976%" height="15" fill="rgb(221,5,38)" fg:x="90" fg:w="3"/><text x="9.1786%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (6 samples, 0.60%)</title><rect x="9.2262%" y="149" width="0.5952%" height="15" fill="rgb(247,18,42)" fg:x="93" fg:w="6"/><text x="9.4762%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (11 samples, 1.09%)</title><rect x="9.2262%" y="165" width="1.0913%" height="15" fill="rgb(241,131,45)" fg:x="93" fg:w="11"/><text x="9.4762%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.10%)</title><rect x="10.3175%" y="165" width="0.0992%" height="15" fill="rgb(249,31,29)" fg:x="104" fg:w="1"/><text x="10.5675%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (4 samples, 0.40%)</title><rect x="10.4167%" y="165" width="0.3968%" height="15" fill="rgb(225,111,53)" fg:x="105" fg:w="4"/><text x="10.6667%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.10%)</title><rect x="10.8135%" y="117" width="0.0992%" height="15" fill="rgb(238,160,17)" fg:x="109" fg:w="1"/><text x="11.0635%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (5 samples, 0.50%)</title><rect x="10.8135%" y="133" width="0.4960%" height="15" fill="rgb(214,148,48)" fg:x="109" fg:w="5"/><text x="11.0635%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (7 samples, 0.69%)</title><rect x="10.8135%" y="149" width="0.6944%" height="15" fill="rgb(232,36,49)" fg:x="109" fg:w="7"/><text x="11.0635%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.10%)</title><rect x="11.5079%" y="149" width="0.0992%" height="15" fill="rgb(209,103,24)" fg:x="116" fg:w="1"/><text x="11.7579%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (11 samples, 1.09%)</title><rect x="10.8135%" y="165" width="1.0913%" height="15" fill="rgb(229,88,8)" fg:x="109" fg:w="11"/><text x="11.0635%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (10 samples, 0.99%)</title><rect x="11.9048%" y="149" width="0.9921%" height="15" fill="rgb(213,181,19)" fg:x="120" fg:w="10"/><text x="12.1548%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (2 samples, 0.20%)</title><rect x="12.8968%" y="149" width="0.1984%" height="15" fill="rgb(254,191,54)" fg:x="130" fg:w="2"/><text x="13.1468%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (8 samples, 0.79%)</title><rect x="13.0952%" y="149" width="0.7937%" height="15" fill="rgb(241,83,37)" fg:x="132" fg:w="8"/><text x="13.3452%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (2 samples, 0.20%)</title><rect x="13.8889%" y="149" width="0.1984%" height="15" fill="rgb(233,36,39)" fg:x="140" fg:w="2"/><text x="14.1389%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (11 samples, 1.09%)</title><rect x="14.0873%" y="133" width="1.0913%" height="15" fill="rgb(226,3,54)" fg:x="142" fg:w="11"/><text x="14.3373%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (23 samples, 2.28%)</title><rect x="14.0873%" y="149" width="2.2817%" height="15" fill="rgb(245,192,40)" fg:x="142" fg:w="23"/><text x="14.3373%" y="159.50">l..</text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (1 samples, 0.10%)</title><rect x="16.3690%" y="149" width="0.0992%" height="15" fill="rgb(238,167,29)" fg:x="165" fg:w="1"/><text x="16.6190%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.30%)</title><rect x="16.4683%" y="85" width="0.2976%" height="15" fill="rgb(232,182,51)" fg:x="166" fg:w="3"/><text x="16.7183%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.40%)</title><rect x="16.4683%" y="101" width="0.3968%" height="15" fill="rgb(231,60,39)" fg:x="166" fg:w="4"/><text x="16.7183%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.20%)</title><rect x="16.8651%" y="101" width="0.1984%" height="15" fill="rgb(208,69,12)" fg:x="170" fg:w="2"/><text x="17.1151%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (9 samples, 0.89%)</title><rect x="16.4683%" y="117" width="0.8929%" height="15" fill="rgb(235,93,37)" fg:x="166" fg:w="9"/><text x="16.7183%" y="127.50"></text></g><g><title>db2-4eb134568b923eb3`db2::db1_string::Db1String::resolve_item (12 samples, 1.19%)</title><rect x="16.4683%" y="133" width="1.1905%" height="15" fill="rgb(213,116,39)" fg:x="166" fg:w="12"/><text x="16.7183%" y="143.50"></text></g><g><title>db2-4eb134568b923eb3`DYLD-STUB$$malloc (2 samples, 0.20%)</title><rect x="17.6587%" y="133" width="0.1984%" height="15" fill="rgb(222,207,29)" fg:x="178" fg:w="2"/><text x="17.9087%" y="143.50"></text></g><g><title>db2-4eb134568b923eb3`&lt;db2::db1_string::Db1String as db2::bytes_serializer::FromReader&gt;::from_reader_and_heap (1 samples, 0.10%)</title><rect x="17.8571%" y="133" width="0.0992%" height="15" fill="rgb(206,96,30)" fg:x="180" fg:w="1"/><text x="18.1071%" y="143.50"></text></g><g><title>db2-4eb134568b923eb3`db2::table_base2::TableBase2::load_pkey (17 samples, 1.69%)</title><rect x="16.4683%" y="149" width="1.6865%" height="15" fill="rgb(218,138,4)" fg:x="166" fg:w="17"/><text x="16.7183%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (6 samples, 0.60%)</title><rect x="18.1548%" y="133" width="0.5952%" height="15" fill="rgb(250,191,14)" fg:x="183" fg:w="6"/><text x="18.4048%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (2 samples, 0.20%)</title><rect x="18.7500%" y="133" width="0.1984%" height="15" fill="rgb(239,60,40)" fg:x="189" fg:w="2"/><text x="19.0000%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.10%)</title><rect x="18.9484%" y="133" width="0.0992%" height="15" fill="rgb(206,27,48)" fg:x="191" fg:w="1"/><text x="19.1984%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (4 samples, 0.40%)</title><rect x="19.0476%" y="117" width="0.3968%" height="15" fill="rgb(225,35,8)" fg:x="192" fg:w="4"/><text x="19.2976%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (9 samples, 0.89%)</title><rect x="19.0476%" y="133" width="0.8929%" height="15" fill="rgb(250,213,24)" fg:x="192" fg:w="9"/><text x="19.2976%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (2 samples, 0.20%)</title><rect x="19.9405%" y="133" width="0.1984%" height="15" fill="rgb(247,123,22)" fg:x="201" fg:w="2"/><text x="20.1905%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.30%)</title><rect x="20.1389%" y="85" width="0.2976%" height="15" fill="rgb(231,138,38)" fg:x="203" fg:w="3"/><text x="20.3889%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (4 samples, 0.40%)</title><rect x="20.1389%" y="101" width="0.3968%" height="15" fill="rgb(231,145,46)" fg:x="203" fg:w="4"/><text x="20.3889%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (6 samples, 0.60%)</title><rect x="20.1389%" y="133" width="0.5952%" height="15" fill="rgb(251,118,11)" fg:x="203" fg:w="6"/><text x="20.3889%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (6 samples, 0.60%)</title><rect x="20.1389%" y="117" width="0.5952%" height="15" fill="rgb(217,147,25)" fg:x="203" fg:w="6"/><text x="20.3889%" y="127.50"></text></g><g><title>db2-4eb134568b923eb3`&lt;db2::dynamic_tuple::TypeData as core::cmp::PartialOrd&gt;::partial_cmp (1 samples, 0.10%)</title><rect x="20.7341%" y="133" width="0.0992%" height="15" fill="rgb(247,81,37)" fg:x="209" fg:w="1"/><text x="20.9841%" y="143.50"></text></g><g><title>db2-4eb134568b923eb3`db2::range::Range&lt;db2::dynamic_tuple::TypeData&gt;::add (32 samples, 3.17%)</title><rect x="18.1548%" y="149" width="3.1746%" height="15" fill="rgb(209,12,38)" fg:x="183" fg:w="32"/><text x="18.4048%" y="159.50">db2..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (4 samples, 0.40%)</title><rect x="21.3294%" y="133" width="0.3968%" height="15" fill="rgb(227,1,9)" fg:x="215" fg:w="4"/><text x="21.5794%" y="143.50"></text></g><g><title>db2-4eb134568b923eb3`std::io::Write::write_all (1 samples, 0.10%)</title><rect x="21.7262%" y="133" width="0.0992%" height="15" fill="rgb(248,47,43)" fg:x="219" fg:w="1"/><text x="21.9762%" y="143.50"></text></g><g><title>db2-4eb134568b923eb3`DYLD-STUB$$memcpy (1 samples, 0.10%)</title><rect x="21.8254%" y="133" width="0.0992%" height="15" fill="rgb(221,10,30)" fg:x="220" fg:w="1"/><text x="22.0754%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.10%)</title><rect x="21.9246%" y="117" width="0.0992%" height="15" fill="rgb(210,229,1)" fg:x="221" fg:w="1"/><text x="22.1746%" y="127.50"></text></g><g><title>db2-4eb134568b923eb3`std::io::Write::write_all (2 samples, 0.20%)</title><rect x="22.0238%" y="117" width="0.1984%" height="15" fill="rgb(222,148,37)" fg:x="222" fg:w="2"/><text x="22.2738%" y="127.50"></text></g><g><title>db2-4eb134568b923eb3`DYLD-STUB$$memcpy (1 samples, 0.10%)</title><rect x="22.2222%" y="117" width="0.0992%" height="15" fill="rgb(234,67,33)" fg:x="224" fg:w="1"/><text x="22.4722%" y="127.50"></text></g><g><title>db2-4eb134568b923eb3`&lt;db2::db1_string::Db1String as db2::bytes_serializer::BytesSerialize&gt;::serialize_with_heap (11 samples, 1.09%)</title><rect x="21.9246%" y="133" width="1.0913%" height="15" fill="rgb(247,98,35)" fg:x="221" fg:w="11"/><text x="22.1746%" y="143.50"></text></g><g><title>db2-4eb134568b923eb3`db2::dynamic_tuple::TupleBuilder::build (26 samples, 2.58%)</title><rect x="21.3294%" y="149" width="2.5794%" height="15" fill="rgb(247,138,52)" fg:x="215" fg:w="26"/><text x="21.5794%" y="159.50">db..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (6 samples, 0.60%)</title><rect x="23.9087%" y="133" width="0.5952%" height="15" fill="rgb(213,79,30)" fg:x="241" fg:w="6"/><text x="24.1587%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.10%)</title><rect x="24.5040%" y="133" width="0.0992%" height="15" fill="rgb(246,177,23)" fg:x="247" fg:w="1"/><text x="24.7540%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.20%)</title><rect x="24.6032%" y="101" width="0.1984%" height="15" fill="rgb(230,62,27)" fg:x="248" fg:w="2"/><text x="24.8532%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (5 samples, 0.50%)</title><rect x="24.6032%" y="117" width="0.4960%" height="15" fill="rgb(216,154,8)" fg:x="248" fg:w="5"/><text x="24.8532%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.20%)</title><rect x="25.0992%" y="117" width="0.1984%" height="15" fill="rgb(244,35,45)" fg:x="253" fg:w="2"/><text x="25.3492%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (8 samples, 0.79%)</title><rect x="24.6032%" y="133" width="0.7937%" height="15" fill="rgb(251,115,12)" fg:x="248" fg:w="8"/><text x="24.8532%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.10%)</title><rect x="25.3968%" y="69" width="0.0992%" height="15" fill="rgb(240,54,50)" fg:x="256" fg:w="1"/><text x="25.6468%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.30%)</title><rect x="25.4960%" y="69" width="0.2976%" height="15" fill="rgb(233,84,52)" fg:x="257" fg:w="3"/><text x="25.7460%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (9 samples, 0.89%)</title><rect x="25.3968%" y="85" width="0.8929%" height="15" fill="rgb(207,117,47)" fg:x="256" fg:w="9"/><text x="25.6468%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (11 samples, 1.09%)</title><rect x="25.3968%" y="101" width="1.0913%" height="15" fill="rgb(249,43,39)" fg:x="256" fg:w="11"/><text x="25.6468%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (12 samples, 1.19%)</title><rect x="25.3968%" y="117" width="1.1905%" height="15" fill="rgb(209,38,44)" fg:x="256" fg:w="12"/><text x="25.6468%" y="127.50"></text></g><g><title>db2-4eb134568b923eb3`db2::db1_string::Db1String::resolve_item (13 samples, 1.29%)</title><rect x="25.3968%" y="133" width="1.2897%" height="15" fill="rgb(236,212,23)" fg:x="256" fg:w="13"/><text x="25.6468%" y="143.50"></text></g><g><title>db2-4eb134568b923eb3`__rdl_alloc (3 samples, 0.30%)</title><rect x="26.6865%" y="133" width="0.2976%" height="15" fill="rgb(242,79,21)" fg:x="269" fg:w="3"/><text x="26.9365%" y="143.50"></text></g><g><title>db2-4eb134568b923eb3`DYLD-STUB$$memcpy (2 samples, 0.20%)</title><rect x="26.9841%" y="133" width="0.1984%" height="15" fill="rgb(211,96,35)" fg:x="272" fg:w="2"/><text x="27.2341%" y="143.50"></text></g><g><title>db2-4eb134568b923eb3`&lt;db2::db1_string::Db1String as db2::bytes_serializer::FromReader&gt;::from_reader_and_heap (1 samples, 0.10%)</title><rect x="27.1825%" y="133" width="0.0992%" height="15" fill="rgb(253,215,40)" fg:x="274" fg:w="1"/><text x="27.4325%" y="143.50"></text></g><g><title>db2-4eb134568b923eb3`db2::dynamic_tuple::DynamicTuple::read_tuple (37 samples, 3.67%)</title><rect x="23.9087%" y="149" width="3.6706%" height="15" fill="rgb(211,81,21)" fg:x="241" fg:w="37"/><text x="24.1587%" y="159.50">db2-..</text></g><g><title>db2-4eb134568b923eb3`__rdl_alloc (1 samples, 0.10%)</title><rect x="27.5794%" y="149" width="0.0992%" height="15" fill="rgb(208,190,38)" fg:x="278" fg:w="1"/><text x="27.8294%" y="159.50"></text></g><g><title>db2-4eb134568b923eb3`DYLD-STUB$$memcpy (2 samples, 0.20%)</title><rect x="27.6786%" y="149" width="0.1984%" height="15" fill="rgb(235,213,38)" fg:x="279" fg:w="2"/><text x="27.9286%" y="159.50"></text></g><g><title>db2-4eb134568b923eb3`DYLD-STUB$$malloc (1 samples, 0.10%)</title><rect x="27.8770%" y="149" width="0.0992%" height="15" fill="rgb(237,122,38)" fg:x="281" fg:w="1"/><text x="28.1270%" y="159.50"></text></g><g><title>db2-4eb134568b923eb3`&lt;db2::db1_string::Db1String as db2::bytes_serializer::BytesSerialize&gt;::serialize_with_heap (1 samples, 0.10%)</title><rect x="27.9762%" y="149" width="0.0992%" height="15" fill="rgb(244,218,35)" fg:x="282" fg:w="1"/><text x="28.2262%" y="159.50"></text></g><g><title>db2-4eb134568b923eb3`db2::table_base2::TableBase2::split (169 samples, 16.77%)</title><rect x="11.9048%" y="165" width="16.7659%" height="15" fill="rgb(240,68,47)" fg:x="120" fg:w="169"/><text x="12.1548%" y="175.50">db2-4eb134568b923eb3`db2::..</text></g><g><title>db2-4eb134568b923eb3`db2::table_base2::TableBase2::lower_bound (1 samples, 0.10%)</title><rect x="28.6706%" y="165" width="0.0992%" height="15" fill="rgb(210,16,53)" fg:x="289" fg:w="1"/><text x="28.9206%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.20%)</title><rect x="28.7698%" y="149" width="0.1984%" height="15" fill="rgb(235,124,12)" fg:x="290" fg:w="2"/><text x="29.0198%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.10%)</title><rect x="28.9683%" y="149" width="0.0992%" height="15" fill="rgb(224,169,11)" fg:x="292" fg:w="1"/><text x="29.2183%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.10%)</title><rect x="29.0675%" y="149" width="0.0992%" height="15" fill="rgb(250,166,2)" fg:x="293" fg:w="1"/><text x="29.3175%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (3 samples, 0.30%)</title><rect x="29.1667%" y="133" width="0.2976%" height="15" fill="rgb(242,216,29)" fg:x="294" fg:w="3"/><text x="29.4167%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (4 samples, 0.40%)</title><rect x="29.1667%" y="149" width="0.3968%" height="15" fill="rgb(230,116,27)" fg:x="294" fg:w="4"/><text x="29.4167%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (48 samples, 4.76%)</title><rect x="29.5635%" y="133" width="4.7619%" height="15" fill="rgb(228,99,48)" fg:x="298" fg:w="48"/><text x="29.8135%" y="143.50">libsys..</text></g><g><title>db2-4eb134568b923eb3`&lt;db2::db1_string::Db1String as db2::bytes_serializer::FromReader&gt;::from_reader_and_heap (7 samples, 0.69%)</title><rect x="34.3254%" y="117" width="0.6944%" height="15" fill="rgb(253,11,6)" fg:x="346" fg:w="7"/><text x="34.5754%" y="127.50"></text></g><g><title>db2-4eb134568b923eb3`db2::table_base2::TableBase2::load_pkey (17 samples, 1.69%)</title><rect x="34.3254%" y="133" width="1.6865%" height="15" fill="rgb(247,143,39)" fg:x="346" fg:w="17"/><text x="34.5754%" y="143.50"></text></g><g><title>db2-4eb134568b923eb3`DYLD-STUB$$memcmp (4 samples, 0.40%)</title><rect x="36.0119%" y="133" width="0.3968%" height="15" fill="rgb(236,97,10)" fg:x="363" fg:w="4"/><text x="36.2619%" y="143.50"></text></g><g><title>db2-4eb134568b923eb3`&lt;db2::dynamic_tuple::TypeData as core::cmp::PartialOrd&gt;::partial_cmp (10 samples, 0.99%)</title><rect x="36.4087%" y="133" width="0.9921%" height="15" fill="rgb(233,208,19)" fg:x="367" fg:w="10"/><text x="36.6587%" y="143.50"></text></g><g><title>db2-4eb134568b923eb3`&lt;db2::db1_string::Db1String as db2::bytes_serializer::FromReader&gt;::from_reader_and_heap (3 samples, 0.30%)</title><rect x="37.4008%" y="133" width="0.2976%" height="15" fill="rgb(216,164,2)" fg:x="377" fg:w="3"/><text x="37.6508%" y="143.50"></text></g><g><title>db2-4eb134568b923eb3`db2::table_base2::TableBase2::lower_bound (97 samples, 9.62%)</title><rect x="29.5635%" y="149" width="9.6230%" height="15" fill="rgb(220,129,5)" fg:x="298" fg:w="97"/><text x="29.8135%" y="159.50">db2-4eb134568b..</text></g><g><title>db2-4eb134568b923eb3`db2::table_base2::TableBase2::load_pkey (17 samples, 1.69%)</title><rect x="39.1865%" y="149" width="1.6865%" height="15" fill="rgb(242,17,10)" fg:x="395" fg:w="17"/><text x="39.4365%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (4 samples, 0.40%)</title><rect x="40.8730%" y="133" width="0.3968%" height="15" fill="rgb(242,107,0)" fg:x="412" fg:w="4"/><text x="41.1230%" y="143.50"></text></g><g><title>db2-4eb134568b923eb3`&lt;db2::dynamic_tuple::TypeData as core::cmp::PartialOrd&gt;::partial_cmp (3 samples, 0.30%)</title><rect x="41.2698%" y="133" width="0.2976%" height="15" fill="rgb(251,28,31)" fg:x="416" fg:w="3"/><text x="41.5198%" y="143.50"></text></g><g><title>db2-4eb134568b923eb3`db2::range::Range&lt;db2::dynamic_tuple::TypeData&gt;::add (8 samples, 0.79%)</title><rect x="40.8730%" y="149" width="0.7937%" height="15" fill="rgb(233,223,10)" fg:x="412" fg:w="8"/><text x="41.1230%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (7 samples, 0.69%)</title><rect x="41.6667%" y="133" width="0.6944%" height="15" fill="rgb(215,21,27)" fg:x="420" fg:w="7"/><text x="41.9167%" y="143.50"></text></g><g><title>db2-4eb134568b923eb3`std::io::Write::write_all (2 samples, 0.20%)</title><rect x="42.3611%" y="133" width="0.1984%" height="15" fill="rgb(232,23,21)" fg:x="427" fg:w="2"/><text x="42.6111%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.20%)</title><rect x="42.5595%" y="117" width="0.1984%" height="15" fill="rgb(244,5,23)" fg:x="429" fg:w="2"/><text x="42.8095%" y="127.50"></text></g><g><title>db2-4eb134568b923eb3`&lt;db2::db1_string::Db1String as db2::bytes_serializer::BytesSerialize&gt;::serialize_with_heap (9 samples, 0.89%)</title><rect x="42.5595%" y="133" width="0.8929%" height="15" fill="rgb(226,81,46)" fg:x="429" fg:w="9"/><text x="42.8095%" y="143.50"></text></g><g><title>db2-4eb134568b923eb3`db2::dynamic_tuple::TupleBuilder::build (25 samples, 2.48%)</title><rect x="41.6667%" y="149" width="2.4802%" height="15" fill="rgb(247,70,30)" fg:x="420" fg:w="25"/><text x="41.9167%" y="159.50">db..</text></g><g><title>db2-4eb134568b923eb3`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.10%)</title><rect x="44.1468%" y="149" width="0.0992%" height="15" fill="rgb(212,68,19)" fg:x="445" fg:w="1"/><text x="44.3968%" y="159.50"></text></g><g><title>db2-4eb134568b923eb3`alloc::raw_vec::finish_grow (1 samples, 0.10%)</title><rect x="44.1468%" y="133" width="0.0992%" height="15" fill="rgb(240,187,13)" fg:x="445" fg:w="1"/><text x="44.3968%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.10%)</title><rect x="44.1468%" y="117" width="0.0992%" height="15" fill="rgb(223,113,26)" fg:x="445" fg:w="1"/><text x="44.3968%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.10%)</title><rect x="44.1468%" y="101" width="0.0992%" height="15" fill="rgb(206,192,2)" fg:x="445" fg:w="1"/><text x="44.3968%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.10%)</title><rect x="44.1468%" y="85" width="0.0992%" height="15" fill="rgb(241,108,4)" fg:x="445" fg:w="1"/><text x="44.3968%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_small (1 samples, 0.10%)</title><rect x="44.1468%" y="69" width="0.0992%" height="15" fill="rgb(247,173,49)" fg:x="445" fg:w="1"/><text x="44.3968%" y="79.50"></text></g><g><title>db2-4eb134568b923eb3`&lt;db2::dynamic_tuple::TypeData as core::cmp::PartialOrd&gt;::partial_cmp (4 samples, 0.40%)</title><rect x="44.2460%" y="149" width="0.3968%" height="15" fill="rgb(224,114,35)" fg:x="446" fg:w="4"/><text x="44.4960%" y="159.50"></text></g><g><title>db2-4eb134568b923eb3`db2::table_base2::TableBase2::insert_tb (164 samples, 16.27%)</title><rect x="28.7698%" y="165" width="16.2698%" height="15" fill="rgb(245,159,27)" fg:x="290" fg:w="164"/><text x="29.0198%" y="175.50">db2-4eb134568b923eb3`db2:..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (4 samples, 0.40%)</title><rect x="45.0397%" y="133" width="0.3968%" height="15" fill="rgb(245,172,44)" fg:x="454" fg:w="4"/><text x="45.2897%" y="143.50"></text></g><g><title>db2-4eb134568b923eb3`db2::chunk_header::ChunkHeaderIndex::push (1 samples, 0.10%)</title><rect x="45.4365%" y="133" width="0.0992%" height="15" fill="rgb(236,23,11)" fg:x="458" fg:w="1"/><text x="45.6865%" y="143.50"></text></g><g><title>db2-4eb134568b923eb3`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (1 samples, 0.10%)</title><rect x="45.4365%" y="117" width="0.0992%" height="15" fill="rgb(205,117,38)" fg:x="458" fg:w="1"/><text x="45.6865%" y="127.50"></text></g><g><title>db2-4eb134568b923eb3`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (1 samples, 0.10%)</title><rect x="45.4365%" y="101" width="0.0992%" height="15" fill="rgb(237,72,25)" fg:x="458" fg:w="1"/><text x="45.6865%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.30%)</title><rect x="45.5357%" y="69" width="0.2976%" height="15" fill="rgb(244,70,9)" fg:x="459" fg:w="3"/><text x="45.7857%" y="79.50"></text></g><g><title>db2-4eb134568b923eb3`db2::table_base2::TableBase2::force_flush (9 samples, 0.89%)</title><rect x="45.0397%" y="165" width="0.8929%" height="15" fill="rgb(217,125,39)" fg:x="454" fg:w="9"/><text x="45.2897%" y="175.50"></text></g><g><title>db2-4eb134568b923eb3`db2::serializer::PageSerializer&lt;W&gt;::add_page (9 samples, 0.89%)</title><rect x="45.0397%" y="149" width="0.8929%" height="15" fill="rgb(235,36,10)" fg:x="454" fg:w="9"/><text x="45.2897%" y="159.50"></text></g><g><title>db2-4eb134568b923eb3`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4 samples, 0.40%)</title><rect x="45.5357%" y="133" width="0.3968%" height="15" fill="rgb(251,123,47)" fg:x="459" fg:w="4"/><text x="45.7857%" y="143.50"></text></g><g><title>db2-4eb134568b923eb3`alloc::raw_vec::finish_grow (4 samples, 0.40%)</title><rect x="45.5357%" y="117" width="0.3968%" height="15" fill="rgb(221,13,13)" fg:x="459" fg:w="4"/><text x="45.7857%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`realloc (4 samples, 0.40%)</title><rect x="45.5357%" y="101" width="0.3968%" height="15" fill="rgb(238,131,9)" fg:x="459" fg:w="4"/><text x="45.7857%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (4 samples, 0.40%)</title><rect x="45.5357%" y="85" width="0.3968%" height="15" fill="rgb(211,50,8)" fg:x="459" fg:w="4"/><text x="45.7857%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.10%)</title><rect x="45.8333%" y="69" width="0.0992%" height="15" fill="rgb(245,182,24)" fg:x="462" fg:w="1"/><text x="46.0833%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.10%)</title><rect x="45.8333%" y="53" width="0.0992%" height="15" fill="rgb(242,14,37)" fg:x="462" fg:w="1"/><text x="46.0833%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (1 samples, 0.10%)</title><rect x="45.8333%" y="37" width="0.0992%" height="15" fill="rgb(246,228,12)" fg:x="462" fg:w="1"/><text x="46.0833%" y="47.50"></text></g><g><title>db2-4eb134568b923eb3`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.10%)</title><rect x="45.9325%" y="149" width="0.0992%" height="15" fill="rgb(213,55,15)" fg:x="463" fg:w="1"/><text x="46.1825%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.10%)</title><rect x="45.9325%" y="133" width="0.0992%" height="15" fill="rgb(209,9,3)" fg:x="463" fg:w="1"/><text x="46.1825%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.10%)</title><rect x="45.9325%" y="117" width="0.0992%" height="15" fill="rgb(230,59,30)" fg:x="463" fg:w="1"/><text x="46.1825%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`medium_malloc_should_clear (1 samples, 0.10%)</title><rect x="45.9325%" y="101" width="0.0992%" height="15" fill="rgb(209,121,21)" fg:x="463" fg:w="1"/><text x="46.1825%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`mvm_allocate_pages (1 samples, 0.10%)</title><rect x="45.9325%" y="85" width="0.0992%" height="15" fill="rgb(220,109,13)" fg:x="463" fg:w="1"/><text x="46.1825%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_map_trap (1 samples, 0.10%)</title><rect x="45.9325%" y="69" width="0.0992%" height="15" fill="rgb(232,18,1)" fg:x="463" fg:w="1"/><text x="46.1825%" y="79.50"></text></g><g><title>db2-4eb134568b923eb3`core::hash::BuildHasher::hash_one (6 samples, 0.60%)</title><rect x="46.0317%" y="149" width="0.5952%" height="15" fill="rgb(215,41,42)" fg:x="464" fg:w="6"/><text x="46.2817%" y="159.50"></text></g><g><title>db2-4eb134568b923eb3`&lt;db2::table_base2::TableBase2 as db2::bytes_serializer::FromReader&gt;::from_reader_and_heap (1 samples, 0.10%)</title><rect x="46.6270%" y="149" width="0.0992%" height="15" fill="rgb(224,123,36)" fg:x="470" fg:w="1"/><text x="46.8770%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (1 samples, 0.10%)</title><rect x="46.6270%" y="133" width="0.0992%" height="15" fill="rgb(240,125,3)" fg:x="470" fg:w="1"/><text x="46.8770%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.10%)</title><rect x="46.6270%" y="117" width="0.0992%" height="15" fill="rgb(205,98,50)" fg:x="470" fg:w="1"/><text x="46.8770%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (1 samples, 0.10%)</title><rect x="46.6270%" y="101" width="0.0992%" height="15" fill="rgb(205,185,37)" fg:x="470" fg:w="1"/><text x="46.8770%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (1 samples, 0.10%)</title><rect x="46.6270%" y="85" width="0.0992%" height="15" fill="rgb(238,207,15)" fg:x="470" fg:w="1"/><text x="46.8770%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (1 samples, 0.10%)</title><rect x="46.6270%" y="69" width="0.0992%" height="15" fill="rgb(213,199,42)" fg:x="470" fg:w="1"/><text x="46.8770%" y="79.50"></text></g><g><title>db2-4eb134568b923eb3`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.10%)</title><rect x="46.7262%" y="149" width="0.0992%" height="15" fill="rgb(235,201,11)" fg:x="471" fg:w="1"/><text x="46.9762%" y="159.50"></text></g><g><title>db2-4eb134568b923eb3`db2::serializer::PageSerializer&lt;W&gt;::load_page_cached (14 samples, 1.39%)</title><rect x="45.9325%" y="165" width="1.3889%" height="15" fill="rgb(207,46,11)" fg:x="463" fg:w="14"/><text x="46.1825%" y="175.50"></text></g><g><title>db2-4eb134568b923eb3`db2::range::Range&lt;db2::dynamic_tuple::TypeData&gt;::add (3 samples, 0.30%)</title><rect x="47.3214%" y="165" width="0.2976%" height="15" fill="rgb(241,35,35)" fg:x="477" fg:w="3"/><text x="47.5714%" y="175.50"></text></g><g><title>db2-4eb134568b923eb3`db2::dynamic_tuple::TupleBuilder::build (1 samples, 0.10%)</title><rect x="47.6190%" y="165" width="0.0992%" height="15" fill="rgb(243,32,47)" fg:x="480" fg:w="1"/><text x="47.8690%" y="175.50"></text></g><g><title>db2-4eb134568b923eb3`db2::dynamic_tuple::DynamicTuple::read_tuple (1 samples, 0.10%)</title><rect x="47.7183%" y="165" width="0.0992%" height="15" fill="rgb(247,202,23)" fg:x="481" fg:w="1"/><text x="47.9683%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.10%)</title><rect x="47.8175%" y="149" width="0.0992%" height="15" fill="rgb(219,102,11)" fg:x="482" fg:w="1"/><text x="48.0675%" y="159.50"></text></g><g><title>db2-4eb134568b923eb3`db2::chunk_header::ChunkHeaderIndex::reset_limits (2 samples, 0.20%)</title><rect x="47.8175%" y="165" width="0.1984%" height="15" fill="rgb(243,110,44)" fg:x="482" fg:w="2"/><text x="48.0675%" y="175.50"></text></g><g><title>db2-4eb134568b923eb3`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::remove (1 samples, 0.10%)</title><rect x="47.9167%" y="149" width="0.0992%" height="15" fill="rgb(222,74,54)" fg:x="483" fg:w="1"/><text x="48.1667%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (1 samples, 0.10%)</title><rect x="47.9167%" y="133" width="0.0992%" height="15" fill="rgb(216,99,12)" fg:x="483" fg:w="1"/><text x="48.1667%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.10%)</title><rect x="48.0159%" y="149" width="0.0992%" height="15" fill="rgb(226,22,26)" fg:x="484" fg:w="1"/><text x="48.2659%" y="159.50"></text></g><g><title>db2-4eb134568b923eb3`alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_upper_bound_index (1 samples, 0.10%)</title><rect x="48.1151%" y="149" width="0.0992%" height="15" fill="rgb(217,163,10)" fg:x="485" fg:w="1"/><text x="48.3651%" y="159.50"></text></g><g><title>db2-4eb134568b923eb3`alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_lower_bound_index (2 samples, 0.20%)</title><rect x="48.2143%" y="149" width="0.1984%" height="15" fill="rgb(213,25,53)" fg:x="486" fg:w="2"/><text x="48.4643%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.10%)</title><rect x="48.4127%" y="117" width="0.0992%" height="15" fill="rgb(252,105,26)" fg:x="488" fg:w="1"/><text x="48.6627%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.30%)</title><rect x="48.4127%" y="133" width="0.2976%" height="15" fill="rgb(220,39,43)" fg:x="488" fg:w="3"/><text x="48.6627%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (21 samples, 2.08%)</title><rect x="48.7103%" y="117" width="2.0833%" height="15" fill="rgb(229,68,48)" fg:x="491" fg:w="21"/><text x="48.9603%" y="127.50">l..</text></g><g><title>db2-4eb134568b923eb3`DYLD-STUB$$memcmp (1 samples, 0.10%)</title><rect x="50.7937%" y="117" width="0.0992%" height="15" fill="rgb(252,8,32)" fg:x="512" fg:w="1"/><text x="51.0437%" y="127.50"></text></g><g><title>db2-4eb134568b923eb3`&lt;db2::dynamic_tuple::TypeData as core::cmp::PartialOrd&gt;::partial_cmp (10 samples, 0.99%)</title><rect x="50.8929%" y="117" width="0.9921%" height="15" fill="rgb(223,20,43)" fg:x="513" fg:w="10"/><text x="51.1429%" y="127.50"></text></g><g><title>db2-4eb134568b923eb3`alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_upper_bound_index (40 samples, 3.97%)</title><rect x="48.7103%" y="133" width="3.9683%" height="15" fill="rgb(229,81,49)" fg:x="491" fg:w="40"/><text x="48.9603%" y="143.50">db2-..</text></g><g><title>db2-4eb134568b923eb3`&lt;db2::dynamic_tuple::TypeData as core::cmp::PartialOrd&gt;::partial_cmp (1 samples, 0.10%)</title><rect x="52.6786%" y="117" width="0.0992%" height="15" fill="rgb(236,28,36)" fg:x="531" fg:w="1"/><text x="52.9286%" y="127.50"></text></g><g><title>db2-4eb134568b923eb3`alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_lower_bound_index (2 samples, 0.20%)</title><rect x="52.6786%" y="133" width="0.1984%" height="15" fill="rgb(249,185,26)" fg:x="531" fg:w="2"/><text x="52.9286%" y="143.50"></text></g><g><title>db2-4eb134568b923eb3`&lt;db2::dynamic_tuple::TypeData as core::cmp::PartialOrd&gt;::partial_cmp (6 samples, 0.60%)</title><rect x="52.8770%" y="133" width="0.5952%" height="15" fill="rgb(249,174,33)" fg:x="533" fg:w="6"/><text x="53.1270%" y="143.50"></text></g><g><title>db2-4eb134568b923eb3`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::range_search (55 samples, 5.46%)</title><rect x="48.4127%" y="149" width="5.4563%" height="15" fill="rgb(233,201,37)" fg:x="488" fg:w="55"/><text x="48.6627%" y="159.50">db2-4eb..</text></g><g><title>db2-4eb134568b923eb3`db2::chunk_header::ChunkHeaderIndex::get_in_one_it (60 samples, 5.95%)</title><rect x="48.0159%" y="165" width="5.9524%" height="15" fill="rgb(221,78,26)" fg:x="484" fg:w="60"/><text x="48.2659%" y="175.50">db2-4eb1..</text></g><g><title>db2-4eb134568b923eb3`DYLD-STUB$$memcmp (1 samples, 0.10%)</title><rect x="53.9683%" y="165" width="0.0992%" height="15" fill="rgb(250,127,30)" fg:x="544" fg:w="1"/><text x="54.2183%" y="175.50"></text></g><g><title>db2-4eb134568b923eb3`DYLD-STUB$$free (4 samples, 0.40%)</title><rect x="54.0675%" y="165" width="0.3968%" height="15" fill="rgb(230,49,44)" fg:x="545" fg:w="4"/><text x="54.3175%" y="175.50"></text></g><g><title>db2-4eb134568b923eb3`&lt;db2::dynamic_tuple::TypeData as core::cmp::PartialOrd&gt;::partial_cmp (1 samples, 0.10%)</title><rect x="54.4643%" y="165" width="0.0992%" height="15" fill="rgb(229,67,23)" fg:x="549" fg:w="1"/><text x="54.7143%" y="175.50"></text></g><g><title>db2-4eb134568b923eb3`db2::dynamic_tuple::TypedTable::store_raw (504 samples, 50.00%)</title><rect x="5.1587%" y="181" width="50.0000%" height="15" fill="rgb(249,83,47)" fg:x="52" fg:w="504"/><text x="5.4087%" y="191.50">db2-4eb134568b923eb3`db2::dynamic_tuple::TypedTable::store_raw</text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (2 samples, 0.20%)</title><rect x="55.1587%" y="165" width="0.1984%" height="15" fill="rgb(215,43,3)" fg:x="556" fg:w="2"/><text x="55.4087%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (3 samples, 0.30%)</title><rect x="55.3571%" y="149" width="0.2976%" height="15" fill="rgb(238,154,13)" fg:x="558" fg:w="3"/><text x="55.6071%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (5 samples, 0.50%)</title><rect x="55.3571%" y="165" width="0.4960%" height="15" fill="rgb(219,56,2)" fg:x="558" fg:w="5"/><text x="55.6071%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.20%)</title><rect x="55.8532%" y="149" width="0.1984%" height="15" fill="rgb(233,0,4)" fg:x="563" fg:w="2"/><text x="56.1032%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.20%)</title><rect x="55.8532%" y="133" width="0.1984%" height="15" fill="rgb(235,30,7)" fg:x="563" fg:w="2"/><text x="56.1032%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.20%)</title><rect x="55.8532%" y="117" width="0.1984%" height="15" fill="rgb(250,79,13)" fg:x="563" fg:w="2"/><text x="56.1032%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (5 samples, 0.50%)</title><rect x="55.8532%" y="165" width="0.4960%" height="15" fill="rgb(211,146,34)" fg:x="563" fg:w="5"/><text x="56.1032%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (49 samples, 4.86%)</title><rect x="56.3492%" y="149" width="4.8611%" height="15" fill="rgb(228,22,38)" fg:x="568" fg:w="49"/><text x="56.5992%" y="159.50">libsys..</text></g><g><title>db2-4eb134568b923eb3`&lt;db2::db1_string::Db1String as db2::bytes_serializer::FromReader&gt;::from_reader_and_heap (4 samples, 0.40%)</title><rect x="61.2103%" y="133" width="0.3968%" height="15" fill="rgb(235,168,5)" fg:x="617" fg:w="4"/><text x="61.4603%" y="143.50"></text></g><g><title>db2-4eb134568b923eb3`db2::table_base2::TableBase2::load_pkey (13 samples, 1.29%)</title><rect x="61.2103%" y="149" width="1.2897%" height="15" fill="rgb(221,155,16)" fg:x="617" fg:w="13"/><text x="61.4603%" y="159.50"></text></g><g><title>db2-4eb134568b923eb3`&lt;db2::dynamic_tuple::TypeData as core::cmp::PartialOrd&gt;::partial_cmp (13 samples, 1.29%)</title><rect x="62.5000%" y="149" width="1.2897%" height="15" fill="rgb(215,215,53)" fg:x="630" fg:w="13"/><text x="62.7500%" y="159.50"></text></g><g><title>db2-4eb134568b923eb3`&lt;db2::db1_string::Db1String as db2::bytes_serializer::FromReader&gt;::from_reader_and_heap (6 samples, 0.60%)</title><rect x="63.7897%" y="149" width="0.5952%" height="15" fill="rgb(223,4,10)" fg:x="643" fg:w="6"/><text x="64.0397%" y="159.50"></text></g><g><title>db2-4eb134568b923eb3`db2::table_base2::TableBase2::upper_bound (94 samples, 9.33%)</title><rect x="56.3492%" y="165" width="9.3254%" height="15" fill="rgb(234,103,6)" fg:x="568" fg:w="94"/><text x="56.5992%" y="175.50">db2-4eb134568..</text></g><g><title>libsystem_platform.dylib`_platform_memcmp (43 samples, 4.27%)</title><rect x="65.6746%" y="149" width="4.2659%" height="15" fill="rgb(227,97,0)" fg:x="662" fg:w="43"/><text x="65.9246%" y="159.50">libsy..</text></g><g><title>db2-4eb134568b923eb3`&lt;db2::db1_string::Db1String as db2::bytes_serializer::FromReader&gt;::from_reader_and_heap (5 samples, 0.50%)</title><rect x="69.9405%" y="133" width="0.4960%" height="15" fill="rgb(234,150,53)" fg:x="705" fg:w="5"/><text x="70.1905%" y="143.50"></text></g><g><title>db2-4eb134568b923eb3`db2::table_base2::TableBase2::load_pkey (13 samples, 1.29%)</title><rect x="69.9405%" y="149" width="1.2897%" height="15" fill="rgb(228,201,54)" fg:x="705" fg:w="13"/><text x="70.1905%" y="159.50"></text></g><g><title>db2-4eb134568b923eb3`DYLD-STUB$$memcmp (1 samples, 0.10%)</title><rect x="71.2302%" y="149" width="0.0992%" height="15" fill="rgb(222,22,37)" fg:x="718" fg:w="1"/><text x="71.4802%" y="159.50"></text></g><g><title>db2-4eb134568b923eb3`&lt;db2::dynamic_tuple::TypeData as core::cmp::PartialOrd&gt;::partial_cmp (11 samples, 1.09%)</title><rect x="71.3294%" y="149" width="1.0913%" height="15" fill="rgb(237,53,32)" fg:x="719" fg:w="11"/><text x="71.5794%" y="159.50"></text></g><g><title>db2-4eb134568b923eb3`&lt;db2::db1_string::Db1String as db2::bytes_serializer::FromReader&gt;::from_reader_and_heap (5 samples, 0.50%)</title><rect x="72.4206%" y="149" width="0.4960%" height="15" fill="rgb(233,25,53)" fg:x="730" fg:w="5"/><text x="72.6706%" y="159.50"></text></g><g><title>db2-4eb134568b923eb3`db2::table_base2::TableBase2::lower_bound (80 samples, 7.94%)</title><rect x="65.6746%" y="165" width="7.9365%" height="15" fill="rgb(210,40,34)" fg:x="662" fg:w="80"/><text x="65.9246%" y="175.50">db2-4eb1345..</text></g><g><title>db2-4eb134568b923eb3`db2::table_base2::TableBase2::load_pkey (36 samples, 3.57%)</title><rect x="73.6111%" y="165" width="3.5714%" height="15" fill="rgb(241,220,44)" fg:x="742" fg:w="36"/><text x="73.8611%" y="175.50">db2-..</text></g><g><title>db2-4eb134568b923eb3`core::hash::BuildHasher::hash_one (1 samples, 0.10%)</title><rect x="77.1825%" y="149" width="0.0992%" height="15" fill="rgb(235,28,35)" fg:x="778" fg:w="1"/><text x="77.4325%" y="159.50"></text></g><g><title>db2-4eb134568b923eb3`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.20%)</title><rect x="77.2817%" y="149" width="0.1984%" height="15" fill="rgb(210,56,17)" fg:x="779" fg:w="2"/><text x="77.5317%" y="159.50"></text></g><g><title>db2-4eb134568b923eb3`db2::serializer::PageSerializer&lt;W&gt;::load_page_cached (4 samples, 0.40%)</title><rect x="77.1825%" y="165" width="0.3968%" height="15" fill="rgb(224,130,29)" fg:x="778" fg:w="4"/><text x="77.4325%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.10%)</title><rect x="77.5794%" y="133" width="0.0992%" height="15" fill="rgb(235,212,8)" fg:x="782" fg:w="1"/><text x="77.8294%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.10%)</title><rect x="77.5794%" y="117" width="0.0992%" height="15" fill="rgb(223,33,50)" fg:x="782" fg:w="1"/><text x="77.8294%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.20%)</title><rect x="77.5794%" y="149" width="0.1984%" height="15" fill="rgb(219,149,13)" fg:x="782" fg:w="2"/><text x="77.8294%" y="159.50"></text></g><g><title>db2-4eb134568b923eb3`alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_upper_bound_index (2 samples, 0.20%)</title><rect x="77.7778%" y="133" width="0.1984%" height="15" fill="rgb(250,156,29)" fg:x="784" fg:w="2"/><text x="78.0278%" y="143.50"></text></g><g><title>db2-4eb134568b923eb3`alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_lower_bound_index (1 samples, 0.10%)</title><rect x="77.9762%" y="133" width="0.0992%" height="15" fill="rgb(216,193,19)" fg:x="786" fg:w="1"/><text x="78.2262%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.20%)</title><rect x="78.0754%" y="101" width="0.1984%" height="15" fill="rgb(216,135,14)" fg:x="787" fg:w="2"/><text x="78.3254%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free (5 samples, 0.50%)</title><rect x="78.0754%" y="117" width="0.4960%" height="15" fill="rgb(241,47,5)" fg:x="787" fg:w="5"/><text x="78.3254%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (14 samples, 1.39%)</title><rect x="78.5714%" y="101" width="1.3889%" height="15" fill="rgb(233,42,35)" fg:x="792" fg:w="14"/><text x="78.8214%" y="111.50"></text></g><g><title>db2-4eb134568b923eb3`DYLD-STUB$$memcmp (2 samples, 0.20%)</title><rect x="79.9603%" y="101" width="0.1984%" height="15" fill="rgb(231,13,6)" fg:x="806" fg:w="2"/><text x="80.2103%" y="111.50"></text></g><g><title>db2-4eb134568b923eb3`&lt;db2::dynamic_tuple::TypeData as core::cmp::PartialOrd&gt;::partial_cmp (13 samples, 1.29%)</title><rect x="80.1587%" y="101" width="1.2897%" height="15" fill="rgb(207,181,40)" fg:x="808" fg:w="13"/><text x="80.4087%" y="111.50"></text></g><g><title>db2-4eb134568b923eb3`alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_upper_bound_index (47 samples, 4.66%)</title><rect x="78.5714%" y="117" width="4.6627%" height="15" fill="rgb(254,173,49)" fg:x="792" fg:w="47"/><text x="78.8214%" y="127.50">db2-4..</text></g><g><title>db2-4eb134568b923eb3`alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_lower_bound_index (8 samples, 0.79%)</title><rect x="83.2341%" y="117" width="0.7937%" height="15" fill="rgb(221,1,38)" fg:x="839" fg:w="8"/><text x="83.4841%" y="127.50"></text></g><g><title>db2-4eb134568b923eb3`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::range_search (72 samples, 7.14%)</title><rect x="78.0754%" y="133" width="7.1429%" height="15" fill="rgb(206,124,46)" fg:x="787" fg:w="72"/><text x="78.3254%" y="143.50">db2-4eb134..</text></g><g><title>db2-4eb134568b923eb3`&lt;db2::dynamic_tuple::TypeData as core::cmp::PartialOrd&gt;::partial_cmp (12 samples, 1.19%)</title><rect x="84.0278%" y="117" width="1.1905%" height="15" fill="rgb(249,21,11)" fg:x="847" fg:w="12"/><text x="84.2778%" y="127.50"></text></g><g><title>db2-4eb134568b923eb3`db2::chunk_header::ChunkHeaderIndex::get_in_one_it (76 samples, 7.54%)</title><rect x="77.7778%" y="149" width="7.5397%" height="15" fill="rgb(222,201,40)" fg:x="784" fg:w="76"/><text x="78.0278%" y="159.50">db2-4eb134..</text></g><g><title>db2-4eb134568b923eb3`alloc::collections::btree::navigate::LeafRange&lt;BorrowType,K,V&gt;::perform_next_back_checked (1 samples, 0.10%)</title><rect x="85.3175%" y="149" width="0.0992%" height="15" fill="rgb(235,61,29)" fg:x="860" fg:w="1"/><text x="85.5675%" y="159.50"></text></g><g><title>db2-4eb134568b923eb3`DYLD-STUB$$malloc (1 samples, 0.10%)</title><rect x="85.4167%" y="149" width="0.0992%" height="15" fill="rgb(219,207,3)" fg:x="861" fg:w="1"/><text x="85.6667%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.10%)</title><rect x="85.5159%" y="101" width="0.0992%" height="15" fill="rgb(222,56,46)" fg:x="862" fg:w="1"/><text x="85.7659%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.30%)</title><rect x="85.5159%" y="117" width="0.2976%" height="15" fill="rgb(239,76,54)" fg:x="862" fg:w="3"/><text x="85.7659%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.20%)</title><rect x="85.6151%" y="101" width="0.1984%" height="15" fill="rgb(231,124,27)" fg:x="863" fg:w="2"/><text x="85.8651%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.40%)</title><rect x="85.5159%" y="133" width="0.3968%" height="15" fill="rgb(249,195,6)" fg:x="862" fg:w="4"/><text x="85.7659%" y="143.50"></text></g><g><title>db2-4eb134568b923eb3`db2::serializer::PageSerializer&lt;W&gt;::get_in_all (88 samples, 8.73%)</title><rect x="77.5794%" y="165" width="8.7302%" height="15" fill="rgb(237,174,47)" fg:x="782" fg:w="88"/><text x="77.8294%" y="175.50">db2-4eb13456..</text></g><g><title>db2-4eb134568b923eb3`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (8 samples, 0.79%)</title><rect x="85.5159%" y="149" width="0.7937%" height="15" fill="rgb(206,201,31)" fg:x="862" fg:w="8"/><text x="85.7659%" y="159.50"></text></g><g><title>db2-4eb134568b923eb3`alloc::collections::btree::navigate::LeafRange&lt;BorrowType,K,V&gt;::perform_next_back_checked (4 samples, 0.40%)</title><rect x="85.9127%" y="133" width="0.3968%" height="15" fill="rgb(231,57,52)" fg:x="866" fg:w="4"/><text x="86.1627%" y="143.50"></text></g><g><title>db2-4eb134568b923eb3`db2::chunk_header::ChunkHeaderIndex::get_in_one_it (1 samples, 0.10%)</title><rect x="86.3095%" y="165" width="0.0992%" height="15" fill="rgb(248,177,22)" fg:x="870" fg:w="1"/><text x="86.5595%" y="175.50"></text></g><g><title>db2-4eb134568b923eb3`DYLD-STUB$$memcpy (1 samples, 0.10%)</title><rect x="86.4087%" y="165" width="0.0992%" height="15" fill="rgb(215,211,37)" fg:x="871" fg:w="1"/><text x="86.6587%" y="175.50"></text></g><g><title>db2-4eb134568b923eb3`db2::dynamic_tuple::TypedTable::get_in_all_iter (321 samples, 31.85%)</title><rect x="55.1587%" y="181" width="31.8452%" height="15" fill="rgb(241,128,51)" fg:x="556" fg:w="321"/><text x="55.4087%" y="191.50">db2-4eb134568b923eb3`db2::dynamic_tuple::TypedTable..</text></g><g><title>db2-4eb134568b923eb3`&lt;db2::dynamic_tuple::TypeData as core::cmp::PartialOrd&gt;::partial_cmp (5 samples, 0.50%)</title><rect x="86.5079%" y="165" width="0.4960%" height="15" fill="rgb(227,165,31)" fg:x="872" fg:w="5"/><text x="86.7579%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_small (1 samples, 0.10%)</title><rect x="87.0040%" y="149" width="0.0992%" height="15" fill="rgb(228,167,24)" fg:x="877" fg:w="1"/><text x="87.2540%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_scan_madvise_free (1 samples, 0.10%)</title><rect x="87.0040%" y="133" width="0.0992%" height="15" fill="rgb(228,143,12)" fg:x="877" fg:w="1"/><text x="87.2540%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.10%)</title><rect x="87.0040%" y="117" width="0.0992%" height="15" fill="rgb(249,149,8)" fg:x="877" fg:w="1"/><text x="87.2540%" y="127.50"></text></g><g><title>db2-4eb134568b923eb3`core::ptr::drop_in_place&lt;db2::serializer::PageSerializer&lt;std::io::cursor::Cursor&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt;&gt; (2 samples, 0.20%)</title><rect x="87.0040%" y="181" width="0.1984%" height="15" fill="rgb(243,35,44)" fg:x="877" fg:w="2"/><text x="87.2540%" y="191.50"></text></g><g><title>db2-4eb134568b923eb3`core::ptr::drop_in_place&lt;(u64,db2::table_base2::TableBase2)&gt; (2 samples, 0.20%)</title><rect x="87.0040%" y="165" width="0.1984%" height="15" fill="rgb(246,89,9)" fg:x="877" fg:w="2"/><text x="87.2540%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.10%)</title><rect x="87.1032%" y="149" width="0.0992%" height="15" fill="rgb(233,213,13)" fg:x="878" fg:w="1"/><text x="87.3532%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.10%)</title><rect x="87.1032%" y="133" width="0.0992%" height="15" fill="rgb(233,141,41)" fg:x="878" fg:w="1"/><text x="87.3532%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.10%)</title><rect x="87.2024%" y="165" width="0.0992%" height="15" fill="rgb(239,167,4)" fg:x="879" fg:w="1"/><text x="87.4524%" y="175.50"></text></g><g><title>db2-4eb134568b923eb3`core::fmt::Formatter::pad_integral::write_prefix (1 samples, 0.10%)</title><rect x="87.3016%" y="165" width="0.0992%" height="15" fill="rgb(209,217,16)" fg:x="880" fg:w="1"/><text x="87.5516%" y="175.50"></text></g><g><title>db2-4eb134568b923eb3`core::fmt::Formatter::pad_integral (1 samples, 0.10%)</title><rect x="87.4008%" y="165" width="0.0992%" height="15" fill="rgb(219,88,35)" fg:x="881" fg:w="1"/><text x="87.6508%" y="175.50"></text></g><g><title>db2-4eb134568b923eb3`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.10%)</title><rect x="87.5000%" y="165" width="0.0992%" height="15" fill="rgb(220,193,23)" fg:x="882" fg:w="1"/><text x="87.7500%" y="175.50"></text></g><g><title>db2-4eb134568b923eb3`alloc::raw_vec::finish_grow (1 samples, 0.10%)</title><rect x="87.5992%" y="149" width="0.0992%" height="15" fill="rgb(230,90,52)" fg:x="883" fg:w="1"/><text x="87.8492%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.10%)</title><rect x="87.6984%" y="101" width="0.0992%" height="15" fill="rgb(252,106,19)" fg:x="884" fg:w="1"/><text x="87.9484%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.10%)</title><rect x="87.6984%" y="85" width="0.0992%" height="15" fill="rgb(206,74,20)" fg:x="884" fg:w="1"/><text x="87.9484%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.10%)</title><rect x="87.7976%" y="101" width="0.0992%" height="15" fill="rgb(230,138,44)" fg:x="885" fg:w="1"/><text x="88.0476%" y="111.50"></text></g><g><title>db2-4eb134568b923eb3`alloc::raw_vec::finish_grow (6 samples, 0.60%)</title><rect x="87.6984%" y="133" width="0.5952%" height="15" fill="rgb(235,182,43)" fg:x="884" fg:w="6"/><text x="87.9484%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (6 samples, 0.60%)</title><rect x="87.6984%" y="117" width="0.5952%" height="15" fill="rgb(242,16,51)" fg:x="884" fg:w="6"/><text x="87.9484%" y="127.50"></text></g><g><title>db2-4eb134568b923eb3`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (7 samples, 0.69%)</title><rect x="87.6984%" y="149" width="0.6944%" height="15" fill="rgb(248,9,4)" fg:x="884" fg:w="7"/><text x="87.9484%" y="159.50"></text></g><g><title>db2-4eb134568b923eb3`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (9 samples, 0.89%)</title><rect x="87.5992%" y="165" width="0.8929%" height="15" fill="rgb(210,31,22)" fg:x="883" fg:w="9"/><text x="87.8492%" y="175.50"></text></g><g><title>db2-4eb134568b923eb3`core::fmt::num::imp::_&lt;impl core::fmt::Display for u64&gt;::fmt (19 samples, 1.88%)</title><rect x="87.2024%" y="181" width="1.8849%" height="15" fill="rgb(239,54,39)" fg:x="879" fg:w="19"/><text x="87.4524%" y="191.50">d..</text></g><g><title>db2-4eb134568b923eb3`core::fmt::Formatter::pad_integral (1 samples, 0.10%)</title><rect x="89.0873%" y="181" width="0.0992%" height="15" fill="rgb(230,99,41)" fg:x="898" fg:w="1"/><text x="89.3373%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.10%)</title><rect x="89.1865%" y="149" width="0.0992%" height="15" fill="rgb(253,106,12)" fg:x="899" fg:w="1"/><text x="89.4365%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.10%)</title><rect x="89.2857%" y="101" width="0.0992%" height="15" fill="rgb(213,46,41)" fg:x="900" fg:w="1"/><text x="89.5357%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (4 samples, 0.40%)</title><rect x="89.2857%" y="117" width="0.3968%" height="15" fill="rgb(215,133,35)" fg:x="900" fg:w="4"/><text x="89.5357%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (6 samples, 0.60%)</title><rect x="89.2857%" y="133" width="0.5952%" height="15" fill="rgb(213,28,5)" fg:x="900" fg:w="6"/><text x="89.5357%" y="143.50"></text></g><g><title>db2-4eb134568b923eb3`alloc::raw_vec::finish_grow (10 samples, 0.99%)</title><rect x="89.1865%" y="165" width="0.9921%" height="15" fill="rgb(215,77,49)" fg:x="899" fg:w="10"/><text x="89.4365%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (9 samples, 0.89%)</title><rect x="89.2857%" y="149" width="0.8929%" height="15" fill="rgb(248,100,22)" fg:x="900" fg:w="9"/><text x="89.5357%" y="159.50"></text></g><g><title>db2-4eb134568b923eb3`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (11 samples, 1.09%)</title><rect x="89.1865%" y="181" width="1.0913%" height="15" fill="rgb(208,67,9)" fg:x="899" fg:w="11"/><text x="89.4365%" y="191.50"></text></g><g><title>db2-4eb134568b923eb3`__rdl_alloc (2 samples, 0.20%)</title><rect x="90.2778%" y="181" width="0.1984%" height="15" fill="rgb(219,133,21)" fg:x="910" fg:w="2"/><text x="90.5278%" y="191.50"></text></g><g><title>db2-4eb134568b923eb3`DYLD-STUB$$malloc (1 samples, 0.10%)</title><rect x="90.4762%" y="181" width="0.0992%" height="15" fill="rgb(246,46,29)" fg:x="912" fg:w="1"/><text x="90.7262%" y="191.50"></text></g><g><title>db2-4eb134568b923eb3`DYLD-STUB$$free (1 samples, 0.10%)</title><rect x="90.5754%" y="181" width="0.0992%" height="15" fill="rgb(246,185,52)" fg:x="913" fg:w="1"/><text x="90.8254%" y="191.50"></text></g><g><title>db2-4eb134568b923eb3`&lt;db2::dynamic_tuple::TypeData as core::cmp::PartialOrd&gt;::partial_cmp (1 samples, 0.10%)</title><rect x="90.6746%" y="181" width="0.0992%" height="15" fill="rgb(252,136,11)" fg:x="914" fg:w="1"/><text x="90.9246%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (2 samples, 0.20%)</title><rect x="90.7738%" y="165" width="0.1984%" height="15" fill="rgb(219,138,53)" fg:x="915" fg:w="2"/><text x="91.0238%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (7 samples, 0.69%)</title><rect x="90.9722%" y="165" width="0.6944%" height="15" fill="rgb(211,51,23)" fg:x="917" fg:w="7"/><text x="91.2222%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.10%)</title><rect x="91.6667%" y="165" width="0.0992%" height="15" fill="rgb(247,221,28)" fg:x="924" fg:w="1"/><text x="91.9167%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.20%)</title><rect x="91.7659%" y="149" width="0.1984%" height="15" fill="rgb(251,222,45)" fg:x="925" fg:w="2"/><text x="92.0159%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (11 samples, 1.09%)</title><rect x="91.7659%" y="165" width="1.0913%" height="15" fill="rgb(217,162,53)" fg:x="925" fg:w="11"/><text x="92.0159%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.10%)</title><rect x="92.8571%" y="133" width="0.0992%" height="15" fill="rgb(229,93,14)" fg:x="936" fg:w="1"/><text x="93.1071%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.20%)</title><rect x="92.9563%" y="117" width="0.1984%" height="15" fill="rgb(209,67,49)" fg:x="937" fg:w="2"/><text x="93.2063%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (6 samples, 0.60%)</title><rect x="92.8571%" y="149" width="0.5952%" height="15" fill="rgb(213,87,29)" fg:x="936" fg:w="6"/><text x="93.1071%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (5 samples, 0.50%)</title><rect x="92.9563%" y="133" width="0.4960%" height="15" fill="rgb(205,151,52)" fg:x="937" fg:w="5"/><text x="93.2063%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (8 samples, 0.79%)</title><rect x="92.8571%" y="165" width="0.7937%" height="15" fill="rgb(253,215,39)" fg:x="936" fg:w="8"/><text x="93.1071%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.10%)</title><rect x="93.6508%" y="149" width="0.0992%" height="15" fill="rgb(221,220,41)" fg:x="944" fg:w="1"/><text x="93.9008%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (4 samples, 0.40%)</title><rect x="93.7500%" y="133" width="0.3968%" height="15" fill="rgb(218,133,21)" fg:x="945" fg:w="4"/><text x="94.0000%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (6 samples, 0.60%)</title><rect x="93.7500%" y="149" width="0.5952%" height="15" fill="rgb(221,193,43)" fg:x="945" fg:w="6"/><text x="94.0000%" y="159.50"></text></g><g><title>db2-4eb134568b923eb3`core::ops::function::impls::_&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (8 samples, 0.79%)</title><rect x="93.6508%" y="165" width="0.7937%" height="15" fill="rgb(240,128,52)" fg:x="944" fg:w="8"/><text x="93.9008%" y="175.50"></text></g><g><title>db2-4eb134568b923eb3`core::hash::BuildHasher::hash_one (2 samples, 0.20%)</title><rect x="94.4444%" y="133" width="0.1984%" height="15" fill="rgb(253,114,12)" fg:x="952" fg:w="2"/><text x="94.6944%" y="143.50"></text></g><g><title>db2-4eb134568b923eb3`db2::serializer::PageSerializer&lt;W&gt;::load_page_cached (4 samples, 0.40%)</title><rect x="94.4444%" y="149" width="0.3968%" height="15" fill="rgb(215,223,47)" fg:x="952" fg:w="4"/><text x="94.6944%" y="159.50"></text></g><g><title>db2-4eb134568b923eb3`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.20%)</title><rect x="94.6429%" y="133" width="0.1984%" height="15" fill="rgb(248,225,23)" fg:x="954" fg:w="2"/><text x="94.8929%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.20%)</title><rect x="94.8413%" y="133" width="0.1984%" height="15" fill="rgb(250,108,0)" fg:x="956" fg:w="2"/><text x="95.0913%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.10%)</title><rect x="95.0397%" y="133" width="0.0992%" height="15" fill="rgb(228,208,7)" fg:x="958" fg:w="1"/><text x="95.2897%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.30%)</title><rect x="95.1389%" y="101" width="0.2976%" height="15" fill="rgb(244,45,10)" fg:x="959" fg:w="3"/><text x="95.3889%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (5 samples, 0.50%)</title><rect x="95.1389%" y="133" width="0.4960%" height="15" fill="rgb(207,125,25)" fg:x="959" fg:w="5"/><text x="95.3889%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (5 samples, 0.50%)</title><rect x="95.1389%" y="117" width="0.4960%" height="15" fill="rgb(210,195,18)" fg:x="959" fg:w="5"/><text x="95.3889%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.10%)</title><rect x="95.6349%" y="85" width="0.0992%" height="15" fill="rgb(249,80,12)" fg:x="964" fg:w="1"/><text x="95.8849%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (4 samples, 0.40%)</title><rect x="95.7341%" y="69" width="0.3968%" height="15" fill="rgb(221,65,9)" fg:x="965" fg:w="4"/><text x="95.9841%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (6 samples, 0.60%)</title><rect x="95.7341%" y="85" width="0.5952%" height="15" fill="rgb(235,49,36)" fg:x="965" fg:w="6"/><text x="95.9841%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (8 samples, 0.79%)</title><rect x="95.6349%" y="101" width="0.7937%" height="15" fill="rgb(225,32,20)" fg:x="964" fg:w="8"/><text x="95.8849%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (11 samples, 1.09%)</title><rect x="95.6349%" y="117" width="1.0913%" height="15" fill="rgb(215,141,46)" fg:x="964" fg:w="11"/><text x="95.8849%" y="127.50"></text></g><g><title>db2-4eb134568b923eb3`db2::db1_string::Db1String::resolve_item (12 samples, 1.19%)</title><rect x="95.6349%" y="133" width="1.1905%" height="15" fill="rgb(250,160,47)" fg:x="964" fg:w="12"/><text x="95.8849%" y="143.50"></text></g><g><title>db2-4eb134568b923eb3`DYLD-STUB$$malloc (1 samples, 0.10%)</title><rect x="96.8254%" y="133" width="0.0992%" height="15" fill="rgb(216,222,40)" fg:x="976" fg:w="1"/><text x="97.0754%" y="143.50"></text></g><g><title>db2-4eb134568b923eb3`&lt;db2::db1_string::Db1String as db2::bytes_serializer::FromReader&gt;::from_reader_and_heap (3 samples, 0.30%)</title><rect x="96.9246%" y="133" width="0.2976%" height="15" fill="rgb(234,217,39)" fg:x="977" fg:w="3"/><text x="97.1746%" y="143.50"></text></g><g><title>db2-4eb134568b923eb3`db2::dynamic_tuple::DynamicTuple::read_tuple (33 samples, 3.27%)</title><rect x="94.8413%" y="149" width="3.2738%" height="15" fill="rgb(207,178,40)" fg:x="956" fg:w="33"/><text x="95.0913%" y="159.50">db2..</text></g><g><title>db2-4eb134568b923eb3`&lt;db2::dynamic_tuple::TableCursor&lt;W&gt; as core::iter::traits::iterator::Iterator&gt;::next (41 samples, 4.07%)</title><rect x="94.4444%" y="165" width="4.0675%" height="15" fill="rgb(221,136,13)" fg:x="952" fg:w="41"/><text x="94.6944%" y="175.50">db2-..</text></g><g><title>db2-4eb134568b923eb3`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (80 samples, 7.94%)</title><rect x="90.7738%" y="181" width="7.9365%" height="15" fill="rgb(249,199,10)" fg:x="915" fg:w="80"/><text x="91.0238%" y="191.50">db2-4eb1345..</text></g><g><title>db2-4eb134568b923eb3`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.20%)</title><rect x="98.7103%" y="181" width="0.1984%" height="15" fill="rgb(249,222,13)" fg:x="995" fg:w="2"/><text x="98.9603%" y="191.50"></text></g><g><title>db2-4eb134568b923eb3`db2::dynamic_tuple::secondaryindices_works (998 samples, 99.01%)</title><rect x="0.6944%" y="197" width="99.0079%" height="15" fill="rgb(244,185,38)" fg:x="7" fg:w="998"/><text x="0.9444%" y="207.50">db2-4eb134568b923eb3`db2::dynamic_tuple::secondaryindices_works</text></g><g><title>libsystem_pthread.dylib`thread_start (1,006 samples, 99.80%)</title><rect x="0.0000%" y="309" width="99.8016%" height="15" fill="rgb(236,202,9)" fg:x="0" fg:w="1006"/><text x="0.2500%" y="319.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (1,006 samples, 99.80%)</title><rect x="0.0000%" y="293" width="99.8016%" height="15" fill="rgb(250,229,37)" fg:x="0" fg:w="1006"/><text x="0.2500%" y="303.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>db2-4eb134568b923eb3`std::sys::unix::thread::Thread::new::thread_start (1,006 samples, 99.80%)</title><rect x="0.0000%" y="277" width="99.8016%" height="15" fill="rgb(206,174,23)" fg:x="0" fg:w="1006"/><text x="0.2500%" y="287.50">db2-4eb134568b923eb3`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>db2-4eb134568b923eb3`core::ops::function::FnOnce::call_once{{vtable.shim}} (1,006 samples, 99.80%)</title><rect x="0.0000%" y="261" width="99.8016%" height="15" fill="rgb(211,33,43)" fg:x="0" fg:w="1006"/><text x="0.2500%" y="271.50">db2-4eb134568b923eb3`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>db2-4eb134568b923eb3`std::sys_common::backtrace::__rust_begin_short_backtrace (1,006 samples, 99.80%)</title><rect x="0.0000%" y="245" width="99.8016%" height="15" fill="rgb(245,58,50)" fg:x="0" fg:w="1006"/><text x="0.2500%" y="255.50">db2-4eb134568b923eb3`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>db2-4eb134568b923eb3`test::run_test::run_test_inner::_{{closure}} (1,006 samples, 99.80%)</title><rect x="0.0000%" y="229" width="99.8016%" height="15" fill="rgb(244,68,36)" fg:x="0" fg:w="1006"/><text x="0.2500%" y="239.50">db2-4eb134568b923eb3`test::run_test::run_test_inner::_{{closure}}</text></g><g><title>db2-4eb134568b923eb3`test::__rust_begin_short_backtrace (1,006 samples, 99.80%)</title><rect x="0.0000%" y="213" width="99.8016%" height="15" fill="rgb(232,229,15)" fg:x="0" fg:w="1006"/><text x="0.2500%" y="223.50">db2-4eb134568b923eb3`test::__rust_begin_short_backtrace</text></g><g><title>db2-4eb134568b923eb3`DYLD-STUB$$free (1 samples, 0.10%)</title><rect x="99.7024%" y="197" width="0.0992%" height="15" fill="rgb(254,30,23)" fg:x="1005" fg:w="1"/><text x="99.9524%" y="207.50"></text></g><g><title>libdyld.dylib`dyld4::LibSystemHelpers::getenv (1 samples, 0.10%)</title><rect x="99.8016%" y="293" width="0.0992%" height="15" fill="rgb(235,160,14)" fg:x="1006" fg:w="1"/><text x="100.0516%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`__exit (1 samples, 0.10%)</title><rect x="99.8016%" y="277" width="0.0992%" height="15" fill="rgb(212,155,44)" fg:x="1006" fg:w="1"/><text x="100.0516%" y="287.50"></text></g><g><title>all (1,008 samples, 100%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(226,2,50)" fg:x="0" fg:w="1008"/><text x="0.2500%" y="335.50"></text></g><g><title>dyld`start (2 samples, 0.20%)</title><rect x="99.8016%" y="309" width="0.1984%" height="15" fill="rgb(234,177,6)" fg:x="1006" fg:w="2"/><text x="100.0516%" y="319.50"></text></g><g><title>db2-4eb134568b923eb3`main (1 samples, 0.10%)</title><rect x="99.9008%" y="293" width="0.0992%" height="15" fill="rgb(217,24,9)" fg:x="1007" fg:w="1"/><text x="100.1508%" y="303.50"></text></g><g><title>db2-4eb134568b923eb3`std::rt::lang_start_internal (1 samples, 0.10%)</title><rect x="99.9008%" y="277" width="0.0992%" height="15" fill="rgb(220,13,46)" fg:x="1007" fg:w="1"/><text x="100.1508%" y="287.50"></text></g><g><title>db2-4eb134568b923eb3`std::rt::lang_start::_{{closure}} (1 samples, 0.10%)</title><rect x="99.9008%" y="261" width="0.0992%" height="15" fill="rgb(239,221,27)" fg:x="1007" fg:w="1"/><text x="100.1508%" y="271.50"></text></g><g><title>db2-4eb134568b923eb3`std::sys_common::backtrace::__rust_begin_short_backtrace (1 samples, 0.10%)</title><rect x="99.9008%" y="245" width="0.0992%" height="15" fill="rgb(222,198,25)" fg:x="1007" fg:w="1"/><text x="100.1508%" y="255.50"></text></g><g><title>db2-4eb134568b923eb3`test::test_main_static (1 samples, 0.10%)</title><rect x="99.9008%" y="229" width="0.0992%" height="15" fill="rgb(211,99,13)" fg:x="1007" fg:w="1"/><text x="100.1508%" y="239.50"></text></g><g><title>db2-4eb134568b923eb3`test::test_main (1 samples, 0.10%)</title><rect x="99.9008%" y="213" width="0.0992%" height="15" fill="rgb(232,111,31)" fg:x="1007" fg:w="1"/><text x="100.1508%" y="223.50"></text></g><g><title>db2-4eb134568b923eb3`test::console::run_tests_console (1 samples, 0.10%)</title><rect x="99.9008%" y="197" width="0.0992%" height="15" fill="rgb(245,82,37)" fg:x="1007" fg:w="1"/><text x="100.1508%" y="207.50"></text></g><g><title>db2-4eb134568b923eb3`test::term::stdout (1 samples, 0.10%)</title><rect x="99.9008%" y="181" width="0.0992%" height="15" fill="rgb(227,149,46)" fg:x="1007" fg:w="1"/><text x="100.1508%" y="191.50"></text></g><g><title>db2-4eb134568b923eb3`test::term::terminfo::TermInfo::from_env (1 samples, 0.10%)</title><rect x="99.9008%" y="165" width="0.0992%" height="15" fill="rgb(218,36,50)" fg:x="1007" fg:w="1"/><text x="100.1508%" y="175.50"></text></g></svg></svg>